单例模式是设计模式中最简单的形式之一。这一模式的目的是使得类的一个对象成为系统的唯一实例。
要实现这一点，可以从客户端对其进行实例化开始。因此需要用一种只允许生成对象类的唯一实例的机制，“阻止”所有想要生成对象的访问。

饿汉式：
public class Singleton{
       prvate static Singleton uniqueInstance=null;
       private Singleton(){}
       public static Singleton instance(){
              if(uniqueInstance==null)
                 uniqueInstance=new Singleton();
              return uniqueInstance;
       
       }

}

设计模式教科书上的示例一般与上述代码类似。如果在多线程环境下，instance（）方法可能会出现问题。如何才能做到线程安全呢，可以将代码
变成：
public synchronized static Singleton instance(){
              if(uniqueInstance==null)
                 uniqueInstance=new Singleton();
              return uniqueInstance;
       
}
加上synchronized进行限定，确实可以解决线程安全问题，但会造成多线程调用该方法时串行执行，效率低下，如何改进？
以下代码既可以保证线程安全又可以提高多线程并发的效率。
public class Singleton{
       //双重加锁机制的实现会使用一个关键字volatile，它的意思是：被volatile修饰的变量的值，将不会被本地线程缓存，
       //所有对该变量的读写都是直接操作共享内存，从而确保多个线程能正确的处理该变量。
       prvate volatile static Singleton uniqueInstance=null;
       private Singleton(){}
       public static Singleton instance(){
              if(uniqueInstance==null){
                 sychronized(Singleton.class){
                  if(uniqueInstance==null)
                     uniqueInstance=new Singleton();
                }
              }
              return uniqueInstance;
       
       }

}

import java.util.concurrent.CountDownLatch;

public class CountDownTest {
	public static void main(String[] args) {

		CountDownLatch latch = new CountDownLatch(1);
		int threadCount = 1000;

		for (int i = 0; i < threadCount; i++) {
			new Thread() {

				@Override
				public void run() {
					try {
						// all thread to wait
						latch.await();
					} catch (InterruptedException e) {
						e.printStackTrace();
					}

					// test get instance
					System.out.println(Singleton.getInstance().hashCode());
				}
			}.start();
		}

		// release lock, let all thread excute Singleton.getInstance() at the
		// same time
		latch.countDown();

	}

}
其中CountDownLatch latch为闭锁，所有线程中都用latch.await();等待锁释放，
待所有线程初始化完成使用latch.countDown();释放锁
，从而达到线程并发执行Singleton.getInstance()的效果。
