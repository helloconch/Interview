单例模式是设计模式中最简单的形式之一。这一模式的目的是使得类的一个对象成为系统的唯一实例。
要实现这一点，可以从客户端对其进行实例化开始。因此需要用一种只允许生成对象类的唯一实例的机制，“阻止”所有想要生成对象的访问。

饿汉式：
顾名思义，他是一个懒汉，他不愿意动弹。什么时候需要吃饭了，他就什么时候开始想办法搞点食物。
即懒汉式一开始不会实例化，什么时候用就什么时候new，才进行实例化。

懒汉式：
顾名思义，他是一个饿汉，他很勤快就怕自己饿着。他总是先把食物准备好，什么时候需要吃了，他随时拿来吃，不需要临时去搞食物。
即饿汉式在一开始类加载的时候就已经实例化，并且创建单例对象，以后只管用即可。

饿汉式：
public class Singleton {
　//一开始类加载的时候就实例化，创建单实例对象
    private static Singleton instance = new Singleton();
    private Singleton(){

    }
    public static Singleton getInstance(){
        return instance;
    }
}


懒汉式：
public synchronized static Singleton instance(){
              if(uniqueInstance==null)
                 uniqueInstance=new Singleton();
              return uniqueInstance;
       
}
加上synchronized进行限定，确实可以解决线程安全问题，但会造成多线程调用该方法时串行执行，效率低下，如何改进？
以下代码既可以保证线程安全又可以提高多线程并发的效率。
public class Singleton{
       //双重加锁机制的实现会使用一个关键字volatile，它的意思是：被volatile修饰的变量的值，将不会被本地线程缓存，
       //所有对该变量的读写都是直接操作共享内存，从而确保多个线程能正确的处理该变量。
       prvate volatile static Singleton uniqueInstance=null;
       private Singleton(){}
       public static Singleton instance(){
              if(uniqueInstance==null){
                 sychronized(Singleton.class){
                  if(uniqueInstance==null)
                     uniqueInstance=new Singleton();
                }
              }
              return uniqueInstance;
       
       }

}

import java.util.concurrent.CountDownLatch;

public class CountDownTest {
	public static void main(String[] args) {

		CountDownLatch latch = new CountDownLatch(1);
		int threadCount = 1000;

		for (int i = 0; i < threadCount; i++) {
			new Thread() {

				@Override
				public void run() {
					try {
						// all thread to wait
						latch.await();
					} catch (InterruptedException e) {
						e.printStackTrace();
					}

					// test get instance
					System.out.println(Singleton.getInstance().hashCode());
				}
			}.start();
		}

		// release lock, let all thread excute Singleton.getInstance() at the
		// same time
		latch.countDown();

	}

}
其中CountDownLatch latch为闭锁，所有线程中都用latch.await();等待锁释放，
待所有线程初始化完成使用latch.countDown();释放锁
，从而达到线程并发执行Singleton.getInstance()的效果。


懒汉式和饿汉式的安全和性能区别：
1） 线程安全：饿汉式在线程还没出现之前就已经实例化了，所以饿汉式一定是线程安全的。懒汉式加载是在使用时才会去new 实例的，那么你去new的时候是一个动态的过程，是放到方法中实现的，比如：
如果这个时候有多个线程访问这个实例，这个时候实例还不存在，还在new，就会进入到方法中，有多少线程就会new出多少个实例。一个方法只能return一个实例，那最终return出哪个呢？是不是会覆盖很多new的实例？这种情况当然也可以解决，那就是加同步锁，避免这种情况发生 。

（2）执行效率：饿汉式没有加任何的锁，因此执行效率比较高。懒汉式一般使用都会加同步锁，效率比饿汉式差。
（3）内存使用：饿汉式在一开始类加载的时候就实例化，无论使用与否，都会实例化，所以会占据空间，浪费内存。懒汉式什么时候用就什么时候实例化，不浪费内存。

