算法：当数据量很大适宜采用该方法。
采用二分法查找时，数据需要有序不重复的。基本思想，假设数据是按升序排序的，对于改定的值x,从序列中间位置开始比较，
如果当前位置等于x,则查找成功；若x小于当前位置值，则在数列的前半段中查找；若x大于当前位置则在数列的后半段中继续查找，知道找到位置。

假设有一个数组{12,23,34,45,56,67,77,89,90}，现要求采用二分法找出指定的数值并将其数组的索引返回，如果没有找到则返回-1。
package dichotomy;

public class DichotomyTest {

	public static void main(String[] args) {
		int[] arry = new int[] { 12, 23, 34, 45, 56, 67, 77, 89, 90 };
		int index = search(arry, 77);
		System.out.println("index:" + index);
	}

	public static int search(int[] arr, int key) {
		int start = 0;
		int end = arr.length - 1;
		while (start <= end) {
			int middle = (start + end) / 2;
			if (key < arr[middle]) {
				end = middle - 1;
			} else if (key > arr[middle]) {
				start = middle + 1;
			} else {
				return middle;
			}
		}
		return -1;
	}

}

